{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toBeDisabled = toBeDisabled;\nexports.toBeEnabled = toBeEnabled;\nvar _utils = require(\"./utils\");\n// form elements that support 'disabled'\nconst FORM_TAGS = ['fieldset', 'input', 'select', 'optgroup', 'option', 'button', 'textarea'];\n\n/*\n * According to specification:\n * If <fieldset> is disabled, the form controls that are its descendants,\n * except descendants of its first optional <legend> element, are disabled\n *\n * https://html.spec.whatwg.org/multipage/form-elements.html#concept-fieldset-disabled\n *\n * This method tests whether element is first legend child of fieldset parent\n */\nfunction isFirstLegendChildOfFieldset(element, parent) {\n  return (0, _utils.getTag)(element) === 'legend' && (0, _utils.getTag)(parent) === 'fieldset' && element.isSameNode(Array.from(parent.children).find(child => (0, _utils.getTag)(child) === 'legend'));\n}\nfunction isElementDisabledByParent(element, parent) {\n  return isElementDisabled(parent) && !isFirstLegendChildOfFieldset(element, parent);\n}\nfunction isCustomElement(tag) {\n  return tag.includes('-');\n}\n\n/*\n * Only certain form elements and custom elements can actually be disabled:\n * https://html.spec.whatwg.org/multipage/semantics-other.html#disabled-elements\n */\nfunction canElementBeDisabled(element) {\n  const tag = (0, _utils.getTag)(element);\n  return FORM_TAGS.includes(tag) || isCustomElement(tag);\n}\nfunction isElementDisabled(element) {\n  return canElementBeDisabled(element) && element.hasAttribute('disabled');\n}\nfunction isAncestorDisabled(element) {\n  const parent = element.parentElement;\n  return Boolean(parent) && (isElementDisabledByParent(element, parent) || isAncestorDisabled(parent));\n}\nfunction isElementOrAncestorDisabled(element) {\n  return canElementBeDisabled(element) && (isElementDisabled(element) || isAncestorDisabled(element));\n}\nfunction toBeDisabled(element) {\n  (0, _utils.checkHtmlElement)(element, toBeDisabled, this);\n  const isDisabled = isElementOrAncestorDisabled(element);\n  return {\n    pass: isDisabled,\n    message: () => {\n      const is = isDisabled ? 'is' : 'is not';\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeDisabled`, 'element', ''), '', `Received element ${is} disabled:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\\n');\n    }\n  };\n}\nfunction toBeEnabled(element) {\n  (0, _utils.checkHtmlElement)(element, toBeEnabled, this);\n  const isEnabled = !isElementOrAncestorDisabled(element);\n  return {\n    pass: isEnabled,\n    message: () => {\n      const is = isEnabled ? 'is' : 'is not';\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBeEnabled`, 'element', ''), '', `Received element ${is} enabled:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\\n');\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}