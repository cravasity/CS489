{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveAccessibleDescription = toHaveAccessibleDescription;\nvar _domAccessibilityApi = require(\"dom-accessibility-api\");\nvar _utils = require(\"./utils\");\nfunction toHaveAccessibleDescription(htmlElement, expectedAccessibleDescription) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveAccessibleDescription, this);\n  const actualAccessibleDescription = (0, _domAccessibilityApi.computeAccessibleDescription)(htmlElement);\n  const missingExpectedValue = arguments.length === 1;\n  let pass = false;\n  if (missingExpectedValue) {\n    // When called without an expected value we only want to validate that the element has an\n    // accessible description, whatever it may be.\n    pass = actualAccessibleDescription !== '';\n  } else {\n    pass = expectedAccessibleDescription instanceof RegExp ? expectedAccessibleDescription.test(actualAccessibleDescription) : this.equals(actualAccessibleDescription, expectedAccessibleDescription);\n  }\n  return {\n    pass,\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.${toHaveAccessibleDescription.name}`, 'element', ''), `Expected element ${to} have accessible description`, expectedAccessibleDescription, 'Received', actualAccessibleDescription);\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}