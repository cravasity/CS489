{"ast":null,"code":"var _jsxFileName = \"/Users/juhyun/cs489/factdect/src/Testing.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nconst Detail = props => {\n  const row = props.row;\n  // const \n};\n\nfunction Testing() {\n  let location = useLocation();\n  {/* 이 페이지에 전달된 정보를 받겠다는 코드입니다 */}\n  {/* 아래 publisher 변수에는 Rank 페이지에서 클릭한 줄의 \"출판사\" 값이 전달됩니다. */}\n  const publisher = location.state.publisher;\n  {/* 정보가 dictionary 꼴로 전달된다고 생각하시면 편할 듯 합니다. { state : {key: value}} 형태로 data가 전달되기 때문에 알짜배기 데이터 값은 location.state.key에 저장됩니다. */}\n  const [rows, setRow] = useState(null);\n  useEffect(() => {\n    axios.get('/get').then(({\n      data\n    }) => {\n      const filtered_data = [];\n      data.map(row => {\n        const json_row = JSON.parse(row);\n      });\n      for (let i = 0; i < data.length; i++) {\n        const json_data = JSON.parse(data[i]);\n        console.log(\"test\");\n        if (json_data.publisher === publisher) {\n\n          // filtered_data.append(data[i])\n        }\n      }\n      // console.log(filtered_data);\n      setRow(data);\n    }).catch(e => {\n      console.error(e.stack);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Test\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, rows && rows.map((v, inx) => {\n    const json_r = JSON.parse(v);\n    return /*#__PURE__*/React.createElement(Detail, {\n      key: inx,\n      row: json_r,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 20\n      }\n    });\n  }));\n}\nexport default Testing;","map":{"version":3,"names":["React","useEffect","useState","axios","useLocation","Detail","props","row","Testing","location","publisher","state","rows","setRow","get","then","data","filtered_data","map","json_row","JSON","parse","i","length","json_data","console","log","catch","e","error","stack","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","v","inx","json_r","key"],"sources":["/Users/juhyun/cs489/factdect/src/Testing.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\n\nconst Detail = (props) => {\n    const row = props.row;\n    // const \n}\n\nfunction Testing() {\n    let location = useLocation(); {/* 이 페이지에 전달된 정보를 받겠다는 코드입니다 */}\n    {/* 아래 publisher 변수에는 Rank 페이지에서 클릭한 줄의 \"출판사\" 값이 전달됩니다. */}\n    const publisher = location.state.publisher; {/* 정보가 dictionary 꼴로 전달된다고 생각하시면 편할 듯 합니다. { state : {key: value}} 형태로 data가 전달되기 때문에 알짜배기 데이터 값은 location.state.key에 저장됩니다. */}\n\n    const [rows, setRow] = useState(null);\n\n    useEffect(() => {\n      axios.get('/get')\n      .then(({data}) => {\n          const filtered_data=[]\n          data.map((row) => {\n            const json_row = JSON.parse(row)\n          })\n          for (let i=0;i<data.length;i++){\n            const json_data = JSON.parse(data[i]);\n            console.log(\"test\");\n            if (json_data.publisher===publisher) {\n              \n              // filtered_data.append(data[i])\n            }\n          }\n          // console.log(filtered_data);\n          setRow(data);\n      })\n      .catch(e => {\n          console.error(e.stack);\n      });\n\n    }, []);\n    return (\n      <div className=\"Test\">\n        {\n        rows && rows.map((v, inx) => {\n            const json_r = JSON.parse(v)\n            return <Detail key={inx} row={json_r}/>\n        })\n    }\n      </div>\n    );\n  }\n  \n  export default Testing;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,MAAM,GAAIC,KAAK,IAAK;EACtB,MAAMC,GAAG,GAAGD,KAAK,CAACC,GAAG;EACrB;AACJ,CAAC;;AAED,SAASC,OAAOA,CAAA,EAAG;EACf,IAAIC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAAE,CAAC;EAC/B,CAAC;EACD,MAAMM,SAAS,GAAGD,QAAQ,CAACE,KAAK,CAACD,SAAS;EAAE,CAAC;EAE7C,MAAM,CAACE,IAAI,EAAEC,MAAM,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAErCD,SAAS,CAAC,MAAM;IACdE,KAAK,CAACW,GAAG,CAAC,MAAM,CAAC,CAChBC,IAAI,CAAC,CAAC;MAACC;IAAI,CAAC,KAAK;MACd,MAAMC,aAAa,GAAC,EAAE;MACtBD,IAAI,CAACE,GAAG,CAAEX,GAAG,IAAK;QAChB,MAAMY,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACd,GAAG,CAAC;MAClC,CAAC,CAAC;MACF,KAAK,IAAIe,CAAC,GAAC,CAAC,EAACA,CAAC,GAACN,IAAI,CAACO,MAAM,EAACD,CAAC,EAAE,EAAC;QAC7B,MAAME,SAAS,GAAGJ,IAAI,CAACC,KAAK,CAACL,IAAI,CAACM,CAAC,CAAC,CAAC;QACrCG,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;QACnB,IAAIF,SAAS,CAACd,SAAS,KAAGA,SAAS,EAAE;;UAEnC;QAAA;MAEJ;MACA;MACAG,MAAM,CAACG,IAAI,CAAC;IAChB,CAAC,CAAC,CACDW,KAAK,CAACC,CAAC,IAAI;MACRH,OAAO,CAACI,KAAK,CAACD,CAAC,CAACE,KAAK,CAAC;IAC1B,CAAC,CAAC;EAEJ,CAAC,EAAE,EAAE,CAAC;EACN,oBACE9B,KAAA,CAAA+B,aAAA;IAAKC,SAAS,EAAC,MAAM;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEnB1B,IAAI,IAAIA,IAAI,CAACM,GAAG,CAAC,CAACqB,CAAC,EAAEC,GAAG,KAAK;IACzB,MAAMC,MAAM,GAAGrB,IAAI,CAACC,KAAK,CAACkB,CAAC,CAAC;IAC5B,oBAAOvC,KAAA,CAAA+B,aAAA,CAAC1B,MAAM;MAACqC,GAAG,EAAEF,GAAI;MAACjC,GAAG,EAAEkC,MAAO;MAAAR,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAC,CAAC;EAC3C,CAAC,CAEE,CAAC;AAEV;AAEA,eAAe9B,OAAO"},"metadata":{},"sourceType":"module"}