{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveFormValues = toHaveFormValues;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _isEqualWith = _interopRequireDefault(require(\"lodash/isEqualWith\"));\nvar _uniq = _interopRequireDefault(require(\"lodash/uniq\"));\nvar _css = _interopRequireDefault(require(\"css.escape\"));\nvar _utils = require(\"./utils\");\n// Returns the combined value of several elements that have the same name\n// e.g. radio buttons or groups of checkboxes\nfunction getMultiElementValue(elements) {\n  const types = (0, _uniq.default)(elements.map(element => element.type));\n  if (types.length !== 1) {\n    throw new Error('Multiple form elements with the same name must be of the same type');\n  }\n  switch (types[0]) {\n    case 'radio':\n      {\n        const theChosenOne = elements.find(radio => radio.checked);\n        return theChosenOne ? theChosenOne.value : undefined;\n      }\n    case 'checkbox':\n      return elements.filter(checkbox => checkbox.checked).map(checkbox => checkbox.value);\n    default:\n      // NOTE: Not even sure this is a valid use case, but just in case...\n      return elements.map(element => element.value);\n  }\n}\nfunction getFormValue(container, name) {\n  const elements = [...container.querySelectorAll(`[name=\"${(0, _css.default)(name)}\"]`)];\n  /* istanbul ignore if */\n  if (elements.length === 0) {\n    return undefined; // shouldn't happen, but just in case\n  }\n\n  switch (elements.length) {\n    case 1:\n      return (0, _utils.getSingleElementValue)(elements[0]);\n    default:\n      return getMultiElementValue(elements);\n  }\n}\n\n// Strips the `[]` suffix off a form value name\nfunction getPureName(name) {\n  return /\\[\\]$/.test(name) ? name.slice(0, -2) : name;\n}\nfunction getAllFormValues(container) {\n  const names = Array.from(container.elements).map(element => element.name);\n  return names.reduce((obj, name) => (0, _extends2.default)({}, obj, {\n    [getPureName(name)]: getFormValue(container, name)\n  }), {});\n}\nfunction toHaveFormValues(formElement, expectedValues) {\n  (0, _utils.checkHtmlElement)(formElement, toHaveFormValues, this);\n  if (!formElement.elements) {\n    // TODO: Change condition to use instanceof against the appropriate element classes instead\n    throw new Error('toHaveFormValues must be called on a form or a fieldset');\n  }\n  const formValues = getAllFormValues(formElement);\n  return {\n    pass: Object.entries(expectedValues).every(([name, expectedValue]) => (0, _isEqualWith.default)(formValues[name], expectedValue, _utils.compareArraysAsSet)),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      const matcher = `${this.isNot ? '.not' : ''}.toHaveFormValues`;\n      const commonKeyValues = Object.keys(formValues).filter(key => expectedValues.hasOwnProperty(key)).reduce((obj, key) => (0, _extends2.default)({}, obj, {\n        [key]: formValues[key]\n      }), {});\n      return [this.utils.matcherHint(matcher, 'element', ''), `Expected the element ${to} have form values`, this.utils.diff(expectedValues, commonKeyValues)].join('\\n\\n');\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}