{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveDisplayValue = toHaveDisplayValue;\nvar _utils = require(\"./utils\");\nfunction toHaveDisplayValue(htmlElement, expectedValue) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveDisplayValue, this);\n  const tagName = htmlElement.tagName.toLowerCase();\n  if (!['select', 'input', 'textarea'].includes(tagName)) {\n    throw new Error('.toHaveDisplayValue() currently supports only input, textarea or select elements, try with another matcher instead.');\n  }\n  if (tagName === 'input' && ['radio', 'checkbox'].includes(htmlElement.type)) {\n    throw new Error(`.toHaveDisplayValue() currently does not support input[type=\"${htmlElement.type}\"], try with another matcher instead.`);\n  }\n  const values = getValues(tagName, htmlElement);\n  const expectedValues = getExpectedValues(expectedValue);\n  const numberOfMatchesWithValues = expectedValues.filter(expected => values.some(value => expected instanceof RegExp ? expected.test(value) : this.equals(value, String(expected)))).length;\n  const matchedWithAllValues = numberOfMatchesWithValues === values.length;\n  const matchedWithAllExpectedValues = numberOfMatchesWithValues === expectedValues.length;\n  return {\n    pass: matchedWithAllValues && matchedWithAllExpectedValues,\n    message: () => (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveDisplayValue`, 'element', ''), `Expected element ${this.isNot ? 'not ' : ''}to have display value`, expectedValue, 'Received', values)\n  };\n}\nfunction getValues(tagName, htmlElement) {\n  return tagName === 'select' ? Array.from(htmlElement).filter(option => option.selected).map(option => option.textContent) : [htmlElement.value];\n}\nfunction getExpectedValues(expectedValue) {\n  return expectedValue instanceof Array ? expectedValue : [expectedValue];\n}","map":null,"metadata":{},"sourceType":"script"}