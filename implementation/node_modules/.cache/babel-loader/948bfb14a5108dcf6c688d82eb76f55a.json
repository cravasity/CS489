{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toBePartiallyChecked = toBePartiallyChecked;\nvar _utils = require(\"./utils\");\nfunction toBePartiallyChecked(element) {\n  (0, _utils.checkHtmlElement)(element, toBePartiallyChecked, this);\n  const isValidInput = () => {\n    return element.tagName.toLowerCase() === 'input' && element.type === 'checkbox';\n  };\n  const isValidAriaElement = () => {\n    return element.getAttribute('role') === 'checkbox';\n  };\n  if (!isValidInput() && !isValidAriaElement()) {\n    return {\n      pass: false,\n      message: () => 'only inputs with type=\"checkbox\" or elements with role=\"checkbox\" and a valid aria-checked attribute can be used with .toBePartiallyChecked(). Use .toHaveValue() instead'\n    };\n  }\n  const isPartiallyChecked = () => {\n    const isAriaMixed = element.getAttribute('aria-checked') === 'mixed';\n    if (isValidInput()) {\n      return element.indeterminate || isAriaMixed;\n    }\n    return isAriaMixed;\n  };\n  return {\n    pass: isPartiallyChecked(),\n    message: () => {\n      const is = isPartiallyChecked() ? 'is' : 'is not';\n      return [this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toBePartiallyChecked`, 'element', ''), '', `Received element ${is} partially checked:`, `  ${this.utils.printReceived(element.cloneNode(false))}`].join('\\n');\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}