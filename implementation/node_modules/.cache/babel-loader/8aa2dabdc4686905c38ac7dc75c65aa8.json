{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveAccessibleErrorMessage = toHaveAccessibleErrorMessage;\nvar _utils = require(\"./utils\");\nconst ariaInvalidName = 'aria-invalid';\nconst validStates = ['false'];\n\n// See `aria-errormessage` spec at https://www.w3.org/TR/wai-aria-1.2/#aria-errormessage\nfunction toHaveAccessibleErrorMessage(htmlElement, expectedAccessibleErrorMessage) {\n  var _htmlElement$ownerDoc, _htmlElement$ownerDoc2;\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveAccessibleErrorMessage, this);\n  const to = this.isNot ? 'not to' : 'to';\n  const method = this.isNot ? '.not.toHaveAccessibleErrorMessage' : '.toHaveAccessibleErrorMessage';\n\n  // Enforce Valid Id\n  const errormessageId = htmlElement.getAttribute('aria-errormessage');\n  const errormessageIdInvalid = !!errormessageId && /\\s+/.test(errormessageId);\n  if (errormessageIdInvalid) {\n    return {\n      pass: false,\n      message: () => {\n        return (0, _utils.getMessage)(this, this.utils.matcherHint(method, 'element'), \"Expected element's `aria-errormessage` attribute to be empty or a single, valid ID\", '', 'Received', `aria-errormessage=\"${errormessageId}\"`);\n      }\n    };\n  }\n\n  // See `aria-invalid` spec at https://www.w3.org/TR/wai-aria-1.2/#aria-invalid\n  const ariaInvalidVal = htmlElement.getAttribute(ariaInvalidName);\n  const fieldValid = !htmlElement.hasAttribute(ariaInvalidName) || validStates.includes(ariaInvalidVal);\n\n  // Enforce Valid `aria-invalid` Attribute\n  if (fieldValid) {\n    return {\n      pass: false,\n      message: () => {\n        return (0, _utils.getMessage)(this, this.utils.matcherHint(method, 'element'), 'Expected element to be marked as invalid with attribute', `${ariaInvalidName}=\"${String(true)}\"`, 'Received', htmlElement.hasAttribute('aria-invalid') ? `${ariaInvalidName}=\"${htmlElement.getAttribute(ariaInvalidName)}` : null);\n      }\n    };\n  }\n  const error = (0, _utils.normalize)((_htmlElement$ownerDoc = (_htmlElement$ownerDoc2 = htmlElement.ownerDocument.getElementById(errormessageId)) == null ? void 0 : _htmlElement$ownerDoc2.textContent) != null ? _htmlElement$ownerDoc : '');\n  return {\n    pass: expectedAccessibleErrorMessage === undefined ? Boolean(error) : expectedAccessibleErrorMessage instanceof RegExp ? expectedAccessibleErrorMessage.test(error) : this.equals(error, expectedAccessibleErrorMessage),\n    message: () => {\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(method, 'element'), `Expected element ${to} have accessible error message`, expectedAccessibleErrorMessage != null ? expectedAccessibleErrorMessage : '', 'Received', error);\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}