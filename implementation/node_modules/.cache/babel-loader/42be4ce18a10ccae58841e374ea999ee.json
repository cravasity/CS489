{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toHaveClass = toHaveClass;\nvar _utils = require(\"./utils\");\nfunction getExpectedClassNamesAndOptions(params) {\n  const lastParam = params.pop();\n  let expectedClassNames, options;\n  if (typeof lastParam === 'object') {\n    expectedClassNames = params;\n    options = lastParam;\n  } else {\n    expectedClassNames = params.concat(lastParam);\n    options = {\n      exact: false\n    };\n  }\n  return {\n    expectedClassNames,\n    options\n  };\n}\nfunction splitClassNames(str) {\n  if (!str) {\n    return [];\n  }\n  return str.split(/\\s+/).filter(s => s.length > 0);\n}\nfunction isSubset(subset, superset) {\n  return subset.every(item => superset.includes(item));\n}\nfunction toHaveClass(htmlElement, ...params) {\n  (0, _utils.checkHtmlElement)(htmlElement, toHaveClass, this);\n  const {\n    expectedClassNames,\n    options\n  } = getExpectedClassNamesAndOptions(params);\n  const received = splitClassNames(htmlElement.getAttribute('class'));\n  const expected = expectedClassNames.reduce((acc, className) => acc.concat(splitClassNames(className)), []);\n  if (options.exact) {\n    return {\n      pass: isSubset(expected, received) && expected.length === received.length,\n      message: () => {\n        const to = this.isNot ? 'not to' : 'to';\n        return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveClass`, 'element', this.utils.printExpected(expected.join(' '))), `Expected the element ${to} have EXACTLY defined classes`, expected.join(' '), 'Received', received.join(' '));\n      }\n    };\n  }\n  return expected.length > 0 ? {\n    pass: isSubset(expected, received),\n    message: () => {\n      const to = this.isNot ? 'not to' : 'to';\n      return (0, _utils.getMessage)(this, this.utils.matcherHint(`${this.isNot ? '.not' : ''}.toHaveClass`, 'element', this.utils.printExpected(expected.join(' '))), `Expected the element ${to} have class`, expected.join(' '), 'Received', received.join(' '));\n    }\n  } : {\n    pass: this.isNot ? received.length > 0 : false,\n    message: () => this.isNot ? (0, _utils.getMessage)(this, this.utils.matcherHint('.not.toHaveClass', 'element', ''), 'Expected the element to have classes', '(none)', 'Received', received.join(' ')) : [this.utils.matcherHint(`.toHaveClass`, 'element'), 'At least one expected class must be provided.'].join('\\n')\n  };\n}","map":null,"metadata":{},"sourceType":"script"}