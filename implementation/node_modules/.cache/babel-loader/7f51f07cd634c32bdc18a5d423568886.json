{"ast":null,"code":"var _jsxFileName = \"/Users/juhyun/cs489/factdect/src/Testing.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\nconst Detail = props => {\n  const row = props.rows;\n};\nfunction Testing() {\n  let location = useLocation();\n  {/* 이 페이지에 전달된 정보를 받겠다는 코드입니다 */}\n  {/* 아래 publisher 변수에는 Rank 페이지에서 클릭한 줄의 \"출판사\" 값이 전달됩니다. */}\n  const publisher = location.state.publisher;\n  {/* 정보가 dictionary 꼴로 전달된다고 생각하시면 편할 듯 합니다. { state : {key: value}} 형태로 data가 전달되기 때문에 알짜배기 데이터 값은 location.state.key에 저장됩니다. */}\n  const [rows, setRow] = useState(null);\n  useEffect(() => {\n    axios.get('/get').then(({\n      data\n    }) => {\n      setRow(data);\n    }).catch(e => {\n      console.error(e.stack);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Test\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, rows && rows.map((v, inx) => {\n    const json_r = JSON.parse(v);\n    return /*#__PURE__*/React.createElement(Detail, {\n      key: inx,\n      rows: json_r,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 20\n      }\n    });\n  }));\n}\nexport default Testing;","map":{"version":3,"names":["React","useEffect","useState","axios","useLocation","Detail","props","row","rows","Testing","location","publisher","state","setRow","get","then","data","catch","e","console","error","stack","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","v","inx","json_r","JSON","parse","key"],"sources":["/Users/juhyun/cs489/factdect/src/Testing.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useLocation } from 'react-router-dom';\n\nconst Detail = (props) => {\n    const row = props.rows;\n}\n\nfunction Testing() {\n    let location = useLocation(); {/* 이 페이지에 전달된 정보를 받겠다는 코드입니다 */}\n    {/* 아래 publisher 변수에는 Rank 페이지에서 클릭한 줄의 \"출판사\" 값이 전달됩니다. */}\n    const publisher = location.state.publisher; {/* 정보가 dictionary 꼴로 전달된다고 생각하시면 편할 듯 합니다. { state : {key: value}} 형태로 data가 전달되기 때문에 알짜배기 데이터 값은 location.state.key에 저장됩니다. */}\n\n    const [rows, setRow] = useState(null);\n\n    useEffect(() => {\n      axios.get('/get')\n      .then(({data}) => {\n          setRow(data);\n      })\n      .catch(e => {\n          console.error(e.stack);\n      });\n\n    }, []);\n    return (\n      <div className=\"Test\">\n        {\n        rows && rows.map((v, inx) => {\n            const json_r = JSON.parse(v)\n            return <Detail key={inx} rows={json_r}/>\n        })\n    }\n      </div>\n    );\n  }\n  \n  export default Testing;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,MAAM,GAAIC,KAAK,IAAK;EACtB,MAAMC,GAAG,GAAGD,KAAK,CAACE,IAAI;AAC1B,CAAC;AAED,SAASC,OAAOA,CAAA,EAAG;EACf,IAAIC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAAE,CAAC;EAC/B,CAAC;EACD,MAAMO,SAAS,GAAGD,QAAQ,CAACE,KAAK,CAACD,SAAS;EAAE,CAAC;EAE7C,MAAM,CAACH,IAAI,EAAEK,MAAM,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAErCD,SAAS,CAAC,MAAM;IACdE,KAAK,CAACW,GAAG,CAAC,MAAM,CAAC,CAChBC,IAAI,CAAC,CAAC;MAACC;IAAI,CAAC,KAAK;MACdH,MAAM,CAACG,IAAI,CAAC;IAChB,CAAC,CAAC,CACDC,KAAK,CAACC,CAAC,IAAI;MACRC,OAAO,CAACC,KAAK,CAACF,CAAC,CAACG,KAAK,CAAC;IAC1B,CAAC,CAAC;EAEJ,CAAC,EAAE,EAAE,CAAC;EACN,oBACErB,KAAA,CAAAsB,aAAA;IAAKC,SAAS,EAAC,MAAM;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEnBrB,IAAI,IAAIA,IAAI,CAACsB,GAAG,CAAC,CAACC,CAAC,EAAEC,GAAG,KAAK;IACzB,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACJ,CAAC,CAAC;IAC5B,oBAAO/B,KAAA,CAAAsB,aAAA,CAACjB,MAAM;MAAC+B,GAAG,EAAEJ,GAAI;MAACxB,IAAI,EAAEyB,MAAO;MAAAT,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CAAC,CAAC;EAC5C,CAAC,CAEE,CAAC;AAEV;AAEA,eAAepB,OAAO"},"metadata":{},"sourceType":"module"}